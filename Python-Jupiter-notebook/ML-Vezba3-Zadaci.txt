import matplotlib.pyplot as plt
import numpy as np
import random
from sklearn.lda import LDA
from sklearn.cluster import KMeans
from matplotlib import pyplot as plt
from sklearn.datasets import load_iris
from sklearn.decomposition import PCA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis

mean = [3,0]
cov= [[0,1],[1,0]]
x1all,y1all=np.random.multivariate_normal([10,0],cov,500).T
x2all,y2all=np.random.multivariate_normal([20,0],cov,500).T
x3all,y3all=np.random.multivariate_normal([30,0],cov,500).T

x1train=x1all[0:int(0.8*len(x1all))]
x2train=x2all[0:int(0.8*len(x2all))]
x3train=x3all[0:int(0.8*len(x3all))]
x1test =x1all[int(0.8*len(x1all)):]
x2test =x2all[int(0.8*len(x2all)):]
x3test =x3all[int(0.8*len(x3all)):]

y1train=y1all[0:int(0.8*len(y1all))]
y2train=y2all[0:int(0.8*len(y2all))]
y3train=y3all[0:int(0.8*len(y3all))]
y1test =y1all[int(0.8*len(y1all)):]
y2test =y2all[int(0.8*len(y2all)):]
y3test =y3all[int(0.8*len(y3all)):]

plt.plot(x1train, y1train, 'x')
plt.plot(x2train, y2train, 'x')
plt.plot(x3train, y3train, 'x')
plt.show()

# all1=np.column_stack((x1train, y1train))
all1 = np.array([x1train, y1train]).T
all2 = np.array([x2train, y2train]).T
all3 = np.array([x3train, y3train]).T

all=np.vstack((all1,all2,all3))
print(all.shape)

target=np.hstack((np.ones(400),np.ones(400)*2,np.ones(400)*3))

lda = LinearDiscriminantAnalysis(n_components=2)
lda.fit(all,target)
ldaPredict = lda.predict(np.array([x2test, y2test]).T)
print(ldaPredict)

----------------------------------------------------------------------------------------------------------------------

import numpy as np
from matplotlib import pyplot as plt
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn import datasets

iris = datasets.load_iris()
X = iris.data[:, :2]
Y = iris.target
all=np.column_stack((X,Y))
np.random.shuffle(all)
print(all.shape)

p=0.9
trainingX = all[:int(p*len(X)), :2]
trainingY = all[:int(p*len(X)), 2]
testX = all[int(p*len(all)):, :2]
testY = all[int(p*len(all)):, 2]

lda = LinearDiscriminantAnalysis()
lda.fit(trainingX, trainingY)
ldaPredict = lda.predict(testX)

print(ldaPredict)
print(testY)
print(testY-ldaPredict)

----------------------------------------------------------------------------------------------------------------------
import numpy as np
import scipy as sp
import matplotlib.pyplot as plot

v1all = np.random.multivariate_normal([0,0],[[0,1],[1,0]],500)
v2all = np.random.multivariate_normal([10,0],[[0,1],[1,0]],500)
v3all = np.random.multivariate_normal([20,0],[[0,1],[1,0]],500)

t1 = np.ones(500)
t2 = np.ones(500)*2
t3 = np.ones(500)*3

a1all= np.vstack([v1all[:,0],v1all[:,1],t1]).T
a2all= np.vstack([v2all[:,0],v2all[:,1],t2]).T
a3all= np.vstack([v3all[:,0],v3all[:,1],t3]).T

all = np.vstack([a1all,a2all,a3all])

np.random.shuffle(all)

atrain = all[:int(len(all)*0.8),:]
atest  = all[int(len(all)*0.8):,:]

plot.scatter(atrain[:,0],atrain[:,1])
plot.scatter(atest[:,0],atest[:,1])
plot.show()

for i in range(1,4):
    plot.scatter(atrain[i==atrain[:,2],0],atrain[i==atrain[:,2],1])
plot.show()    