import matplotlib.pyplot as plt
import numpy as np
import numpy as np
from sklearn.cluster import KMeans
from matplotlib import pyplot as plt
from sklearn.datasets import load_iris
from sklearn.decomposition import PCA
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis

iris = load_iris()
features = iris.data
feature_names = iris.feature_names
target = iris.target
target_names = iris.target_names
all=np.insert(features, 4, target, axis=1)
print(all.shape)
np.random.shuffle(all)
training = all[:30]
test = all[30:]
randomized_training_features=training[:,:4]
randomized_training_target=training[:,4]
randomized_test_features=test[:,:4]
randomized_test_target=test[:,4]

pca = PCA(n_components=2)
pcaTransform = pca.fit(randomized_training_features).transform(randomized_test_features)

lda = LinearDiscriminantAnalysis(n_components=2)
ldaTransform = lda.fit(randomized_training_features, randomized_training_target).transform(randomized_test_features)
ldaPredict = lda.predict(randomized_test_features) 

plt.scatter(randomized_test_features[:,0], randomized_test_features[:,1], c='r')
plt.show()

plt.scatter(pcaTransform[:,0], pcaTransform[:,1], c='b')
plt.show()

plt.scatter(pcaTransform[randomized_test_target==0,0], pcaTransform[randomized_test_target==0,1], c='r')
plt.scatter(pcaTransform[randomized_test_target==1,0], pcaTransform[randomized_test_target==1,1], c='b')
plt.scatter(pcaTransform[randomized_test_target==2,0], pcaTransform[randomized_test_target==2,1], c='g')
plt.show()

plt.scatter(ldaTransform[:,0], ldaTransform[:,1], c='g')
plt.show()

# plt.scatter(ldaTransform[randomized_test_target==0,0], ldaTransform[randomized_test_target==0,1], c='r')
# plt.scatter(ldaTransform[randomized_test_target==1,0], ldaTransform[randomized_test_target==1,1], c='b')
# plt.scatter(ldaTransform[randomized_test_target==2,0], ldaTransform[randomized_test_target==2,1], c='g')
# plt.show()

for i,c in zip (range(0,3), ["c", "b", "g"]):
    plt.scatter(ldaTransform[randomized_test_target==i,0], ldaTransform[randomized_test_target==i,1], c=c)
plt.show()
