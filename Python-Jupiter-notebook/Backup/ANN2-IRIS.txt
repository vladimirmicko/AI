import numpy as np
from sklearn import datasets

digits = datasets.load_digits()
X_digits = digits.data
Y_digits = digits.target

indAll = np.arange(len(Y_digits))
np.random.shuffle(indAll)

testToTrainRatio = 0.1
trainX=X_digits[0:int(testToTrainRatio*len(indAll))]
testX=X_digits[int(testToTrainRatio*len(indAll)):]
trainY=Y_digits[0:int(testToTrainRatio*len(indAll))]
testY=Y_digits[int(testToTrainRatio*len(indAll)):]

trainingDataset=X_digits
target=Y_digits
testingDataset=X_digits
testingTarget=Y_digits

target = [[target[i] for j in range(1)] for i in range(len(target))]
target=np.asarray(target)
print("target.shape: "+str(target.shape))
np.random.seed(1)


def activationFunction(x):
    return 1/(1+np.exp(-x))

def derivative(x):
    return x*(1-x)



 

    
X = np.array([[0,0,1],
            [0,1,1],
            [1,0,1],
            [1,1,1],
            [1,1,0],
            [0,1,0]])
                
y = np.array([[0],
            [1],
            [1],
            [1],
            [0],
            [1]])


X=X_digits
y = target


# randomly initialize our weights with mean 0
weights0 = 2*np.random.random((64,32)) - 1
weights1 = 2*np.random.random((32,1)) - 1
print("weights0:")
print(weights0)
print("weights1:")
print(weights1)

for j in range(60000):

    # Feed forward through layers 0, 1, and 2
    l0 = X
    l1 = activationFunction(np.dot(l0,weights0))
    l2 = activationFunction(np.dot(l1,weights1))

    # how much did we miss the target value?
    l2_error = y - l2
    
    if (j% 10000) == 0:
        print ("Error:" + str(np.mean(np.abs(l2_error))))
        
    # in what direction is the target value?
    # were we really sure? if so, don't change too much.
    l2_delta = l2_error*derivative(l2)

    # how much did each l1 value contribute to the l2 error (according to the weights)?
    l1_error = l2_delta.dot(weights1.T)
    
    # in what direction is the target l1?
    # were we really sure? if so, don't change too much.
    l1_delta = l1_error * derivative(l1)

    weights1 += l1.T.dot(l2_delta)
    weights0 += l0.T.dot(l1_delta)
    
print("l0:")
print(l0)
print("weights0:")
print(weights0)
print("weights1:")
print(weights1)
print("l2:")
print(l2)